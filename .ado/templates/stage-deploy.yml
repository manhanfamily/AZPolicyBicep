---
parameters:
  - name: stageName
  - name: serviceConnection
  - name: environmentName
  - name: templateFile
  - name: templateParameterFile
  - name: parameters
    default:
  - name: condition
    default: true
  - name: previousStage
    default:
  - name: tenantId
    default:
  - name: managementGroupId
    default:
  - name: subscriptionId
    default:
  - name: resourceGroupName
    default:
  - name: location
    default:
  - name: scope
    default:
  - name: Agentused

stages:
  - stage: ${{ parameters.stageName }}
    pool:
      ${{ if eq(parameters.Agentused, 'Ubuntu-Latest (Synergy Hosted)') }}:
        name: 'Azure_LinuxVMSS_agent'
      ${{ else }}:
        vmImage: 'ubuntu-latest'
    displayName: "${{ parameters.stageName }}"
    dependsOn: ${{ parameters.previousStage }}
    condition: ${{ parameters.condition }}

    jobs:
      - deployment: Deployment
        displayName: "Deployment"
        environment: ${{ parameters.environmentName }}
        continueOnError: false

        strategy:
          runOnce:
            deploy:
              steps:
                # Checkout code
                - checkout: self # Checkout the "synergy-au/azure-infrastructure-sap" repo
                  name: checkoutRepository
                  displayName: Checkout Repository
                  submodules: true
                  lfs: false
                  clean: true
                  continueOnError: false
                  enabled: true

                # Set Partner Admin Link (PAL)
                - task: AzureCLI@2
                  displayName: Set PAL
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az extension add --name managementpartner
                      az managementpartner update --partner-id 1158331 || az managementpartner create --partner-id 1158331

                # Restore the module from the Private Azure Container Registry
                - task: AzureCLI@2
                  displayName: "AzCLI: Restore Bicep Modules"
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az bicep restore --file ${{ parameters.templateFile }}

                # Tenant Scope Deployment
                - task: AzureCLI@2
                  displayName: "AzCLI: Create Tenant Deployment"
                  condition: ${{ eq(parameters.scope, 'Tenant')}}
                  enabled: true
                  continueOnError: false
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment tenant create `
                        --location ${{ parameters.location }} `
                        --template-file ${{ parameters.templateFile }} `
                        --parameters ${{ parameters.templateParameterFile }}
                    powerShellErrorActionPreference: "stop"
                    addSpnToEnvironment: false
                    useGlobalConfig: false
                    failOnStandardError: false
                    powerShellIgnoreLASTEXITCODE: false

                # Management Group Scope Deployment
                - task: AzureCLI@2
                  displayName: "AzCLI: Create Management Group Deployment"
                  condition: ${{ eq(parameters.scope, 'ManagementGroup')}}
                  enabled: true
                  continueOnError: false
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment mg create `
                        --location ${{ parameters.location }} `
                        --management-group-id ${{ parameters.managementGroupId }} `
                        --template-file ${{ parameters.templateFile }} `
                        --parameters ${{ parameters.templateParameterFile }}
                    powerShellErrorActionPreference: "stop"
                    addSpnToEnvironment: false
                    useGlobalConfig: false
                    failOnStandardError: false
                    powerShellIgnoreLASTEXITCODE: false

                # Subscription Scope Deployment
                - task: AzureCLI@2
                  displayName: "AzCLI: Create Subscription Deployment"
                  condition: ${{ eq(parameters.scope, 'Subscription')}}
                  enabled: true
                  continueOnError: false
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment sub create `
                        --location ${{ parameters.location }} `
                        --template-file ${{ parameters.templateFile }} `
                        --parameters ${{ parameters.templateParameterFile }}
                    powerShellErrorActionPreference: "stop"
                    addSpnToEnvironment: false
                    useGlobalConfig: false
                    failOnStandardError: false
                    powerShellIgnoreLASTEXITCODE: false

                # Resource Group Scope Deployment
                - task: AzureCLI@2
                  displayName: "AzCLI: Create Resource Group Deployment"
                  condition: ${{ eq(parameters.scope, 'ResourceGroup')}}
                  enabled: true
                  continueOnError: false
                  inputs:
                    azureSubscription: ${{ parameters.serviceConnection }}
                    scriptType: pscore
                    scriptLocation: inlineScript
                    inlineScript: |
                      az deployment group create `
                        --resource-group ${{ parameters.resourceGroupName }} `
                        --template-file ${{ parameters.templateFile }} `
                        --parameters ${{ parameters.templateParameterFile }}
                    powerShellErrorActionPreference: "stop"
                    addSpnToEnvironment: false
                    useGlobalConfig: false
                    failOnStandardError: false
                    powerShellIgnoreLASTEXITCODE: false